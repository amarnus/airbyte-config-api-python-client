# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class DbMigrationState(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        enum_value_to_name = {
            "pending": "PENDING",
            "above_target": "ABOVE_TARGET",
            "below_baseline": "BELOW_BASELINE",
            "baseline": "BASELINE",
            "ignored": "IGNORED",
            "missing_success": "MISSING_SUCCESS",
            "missing_failed": "MISSING_FAILED",
            "success": "SUCCESS",
            "undone": "UNDONE",
            "available": "AVAILABLE",
            "failed": "FAILED",
            "out_of_order": "OUT_OF_ORDER",
            "future_success": "FUTURE_SUCCESS",
            "future_failed": "FUTURE_FAILED",
            "outdated": "OUTDATED",
            "superseded": "SUPERSEDED",
            "deleted": "DELETED",
        }
    
    @schemas.classproperty
    def PENDING(cls):
        return cls("pending")
    
    @schemas.classproperty
    def ABOVE_TARGET(cls):
        return cls("above_target")
    
    @schemas.classproperty
    def BELOW_BASELINE(cls):
        return cls("below_baseline")
    
    @schemas.classproperty
    def BASELINE(cls):
        return cls("baseline")
    
    @schemas.classproperty
    def IGNORED(cls):
        return cls("ignored")
    
    @schemas.classproperty
    def MISSING_SUCCESS(cls):
        return cls("missing_success")
    
    @schemas.classproperty
    def MISSING_FAILED(cls):
        return cls("missing_failed")
    
    @schemas.classproperty
    def SUCCESS(cls):
        return cls("success")
    
    @schemas.classproperty
    def UNDONE(cls):
        return cls("undone")
    
    @schemas.classproperty
    def AVAILABLE(cls):
        return cls("available")
    
    @schemas.classproperty
    def FAILED(cls):
        return cls("failed")
    
    @schemas.classproperty
    def OUT_OF_ORDER(cls):
        return cls("out_of_order")
    
    @schemas.classproperty
    def FUTURE_SUCCESS(cls):
        return cls("future_success")
    
    @schemas.classproperty
    def FUTURE_FAILED(cls):
        return cls("future_failed")
    
    @schemas.classproperty
    def OUTDATED(cls):
        return cls("outdated")
    
    @schemas.classproperty
    def SUPERSEDED(cls):
        return cls("superseded")
    
    @schemas.classproperty
    def DELETED(cls):
        return cls("deleted")
