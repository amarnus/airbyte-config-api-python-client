# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class AirbyteStream(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    the immutable schema defined by the source
    """


    class MetaOapg:
        required = {
            "json_schema",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            jsonSchema = schemas.DictSchema
            
            
            class supportedSyncModes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SyncMode']:
                        return SyncMode
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SyncMode'], typing.List['SyncMode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supportedSyncModes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SyncMode':
                    return super().__getitem__(i)
            sourceDefinedCursor = schemas.BoolSchema
            
            
            class defaultCursorField(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'defaultCursorField':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class sourceDefinedPrimaryKey(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceDefinedPrimaryKey':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            namespace = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "jsonSchema": jsonSchema,
                "supportedSyncModes": supportedSyncModes,
                "sourceDefinedCursor": sourceDefinedCursor,
                "defaultCursorField": defaultCursorField,
                "sourceDefinedPrimaryKey": sourceDefinedPrimaryKey,
                "namespace": namespace,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jsonSchema"]) -> MetaOapg.properties.jsonSchema: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportedSyncModes"]) -> MetaOapg.properties.supportedSyncModes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceDefinedCursor"]) -> MetaOapg.properties.sourceDefinedCursor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultCursorField"]) -> MetaOapg.properties.defaultCursorField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceDefinedPrimaryKey"]) -> MetaOapg.properties.sourceDefinedPrimaryKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["jsonSchema"], typing_extensions.Literal["supportedSyncModes"], typing_extensions.Literal["sourceDefinedCursor"], typing_extensions.Literal["defaultCursorField"], typing_extensions.Literal["sourceDefinedPrimaryKey"], typing_extensions.Literal["namespace"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jsonSchema"]) -> typing.Union[MetaOapg.properties.jsonSchema, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportedSyncModes"]) -> typing.Union[MetaOapg.properties.supportedSyncModes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceDefinedCursor"]) -> typing.Union[MetaOapg.properties.sourceDefinedCursor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultCursorField"]) -> typing.Union[MetaOapg.properties.defaultCursorField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceDefinedPrimaryKey"]) -> typing.Union[MetaOapg.properties.sourceDefinedPrimaryKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["jsonSchema"], typing_extensions.Literal["supportedSyncModes"], typing_extensions.Literal["sourceDefinedCursor"], typing_extensions.Literal["defaultCursorField"], typing_extensions.Literal["sourceDefinedPrimaryKey"], typing_extensions.Literal["namespace"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        jsonSchema: typing.Union[MetaOapg.properties.jsonSchema, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        supportedSyncModes: typing.Union[MetaOapg.properties.supportedSyncModes, list, tuple, schemas.Unset] = schemas.unset,
        sourceDefinedCursor: typing.Union[MetaOapg.properties.sourceDefinedCursor, bool, schemas.Unset] = schemas.unset,
        defaultCursorField: typing.Union[MetaOapg.properties.defaultCursorField, list, tuple, schemas.Unset] = schemas.unset,
        sourceDefinedPrimaryKey: typing.Union[MetaOapg.properties.sourceDefinedPrimaryKey, list, tuple, schemas.Unset] = schemas.unset,
        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AirbyteStream':
        return super().__new__(
            cls,
            *_args,
            name=name,
            jsonSchema=jsonSchema,
            supportedSyncModes=supportedSyncModes,
            sourceDefinedCursor=sourceDefinedCursor,
            defaultCursorField=defaultCursorField,
            sourceDefinedPrimaryKey=sourceDefinedPrimaryKey,
            namespace=namespace,
            _configuration=_configuration,
        )

from airbyte_config_api_client.model.sync_mode import SyncMode
