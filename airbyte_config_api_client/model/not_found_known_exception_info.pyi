# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class NotFoundKnownExceptionInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "message",
        }
        
        class properties:
            message = schemas.StrSchema
            id = schemas.StrSchema
            exceptionClassName = schemas.StrSchema
            
            
            class exceptionStack(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exceptionStack':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            rootCauseExceptionClassName = schemas.StrSchema
            
            
            class rootCauseExceptionStack(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rootCauseExceptionStack':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "message": message,
                "id": id,
                "exceptionClassName": exceptionClassName,
                "exceptionStack": exceptionStack,
                "rootCauseExceptionClassName": rootCauseExceptionClassName,
                "rootCauseExceptionStack": rootCauseExceptionStack,
            }
    
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exceptionClassName"]) -> MetaOapg.properties.exceptionClassName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exceptionStack"]) -> MetaOapg.properties.exceptionStack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootCauseExceptionClassName"]) -> MetaOapg.properties.rootCauseExceptionClassName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootCauseExceptionStack"]) -> MetaOapg.properties.rootCauseExceptionStack: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "id", "exceptionClassName", "exceptionStack", "rootCauseExceptionClassName", "rootCauseExceptionStack", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exceptionClassName"]) -> typing.Union[MetaOapg.properties.exceptionClassName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exceptionStack"]) -> typing.Union[MetaOapg.properties.exceptionStack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootCauseExceptionClassName"]) -> typing.Union[MetaOapg.properties.rootCauseExceptionClassName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootCauseExceptionStack"]) -> typing.Union[MetaOapg.properties.rootCauseExceptionStack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "id", "exceptionClassName", "exceptionStack", "rootCauseExceptionClassName", "rootCauseExceptionStack", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        exceptionClassName: typing.Union[MetaOapg.properties.exceptionClassName, str, schemas.Unset] = schemas.unset,
        exceptionStack: typing.Union[MetaOapg.properties.exceptionStack, list, tuple, schemas.Unset] = schemas.unset,
        rootCauseExceptionClassName: typing.Union[MetaOapg.properties.rootCauseExceptionClassName, str, schemas.Unset] = schemas.unset,
        rootCauseExceptionStack: typing.Union[MetaOapg.properties.rootCauseExceptionStack, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotFoundKnownExceptionInfo':
        return super().__new__(
            cls,
            *_args,
            message=message,
            id=id,
            exceptionClassName=exceptionClassName,
            exceptionStack=exceptionStack,
            rootCauseExceptionClassName=rootCauseExceptionClassName,
            rootCauseExceptionStack=rootCauseExceptionStack,
            _configuration=_configuration,
            **kwargs,
        )
