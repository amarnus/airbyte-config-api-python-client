# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class ConnectionUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Used to apply a patch-style update to a connection, which means that null properties remain unchanged
    """


    class MetaOapg:
        required = {
            "connectionId",
        }
        
        class properties:
            connectionId = schemas.UUIDSchema
        
            @staticmethod
            def namespaceDefinition() -> typing.Type['NamespaceDefinitionType']:
                return NamespaceDefinitionType
            namespaceFormat = schemas.StrSchema
            name = schemas.StrSchema
            prefix = schemas.StrSchema
            
            
            class operationIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.UUIDSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operationIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def syncCatalog() -> typing.Type['AirbyteCatalog']:
                return AirbyteCatalog
        
            @staticmethod
            def schedule() -> typing.Type['ConnectionSchedule']:
                return ConnectionSchedule
        
            @staticmethod
            def scheduleType() -> typing.Type['ConnectionScheduleType']:
                return ConnectionScheduleType
        
            @staticmethod
            def scheduleData() -> typing.Type['ConnectionScheduleData']:
                return ConnectionScheduleData
        
            @staticmethod
            def status() -> typing.Type['ConnectionStatus']:
                return ConnectionStatus
        
            @staticmethod
            def resourceRequirements() -> typing.Type['ResourceRequirements']:
                return ResourceRequirements
            sourceCatalogId = schemas.UUIDSchema
        
            @staticmethod
            def geography() -> typing.Type['Geography']:
                return Geography
            notifySchemaChanges = schemas.BoolSchema
        
            @staticmethod
            def nonBreakingChangesPreference() -> typing.Type['NonBreakingChangesPreference']:
                return NonBreakingChangesPreference
            breakingChange = schemas.BoolSchema
            __annotations__ = {
                "connectionId": connectionId,
                "namespaceDefinition": namespaceDefinition,
                "namespaceFormat": namespaceFormat,
                "name": name,
                "prefix": prefix,
                "operationIds": operationIds,
                "syncCatalog": syncCatalog,
                "schedule": schedule,
                "scheduleType": scheduleType,
                "scheduleData": scheduleData,
                "status": status,
                "resourceRequirements": resourceRequirements,
                "sourceCatalogId": sourceCatalogId,
                "geography": geography,
                "notifySchemaChanges": notifySchemaChanges,
                "nonBreakingChangesPreference": nonBreakingChangesPreference,
                "breakingChange": breakingChange,
            }
    
    connectionId: MetaOapg.properties.connectionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespaceDefinition"]) -> 'NamespaceDefinitionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespaceFormat"]) -> MetaOapg.properties.namespaceFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operationIds"]) -> MetaOapg.properties.operationIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncCatalog"]) -> 'AirbyteCatalog': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> 'ConnectionSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduleType"]) -> 'ConnectionScheduleType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduleData"]) -> 'ConnectionScheduleData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ConnectionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceRequirements"]) -> 'ResourceRequirements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceCatalogId"]) -> MetaOapg.properties.sourceCatalogId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geography"]) -> 'Geography': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifySchemaChanges"]) -> MetaOapg.properties.notifySchemaChanges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonBreakingChangesPreference"]) -> 'NonBreakingChangesPreference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakingChange"]) -> MetaOapg.properties.breakingChange: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connectionId", "namespaceDefinition", "namespaceFormat", "name", "prefix", "operationIds", "syncCatalog", "schedule", "scheduleType", "scheduleData", "status", "resourceRequirements", "sourceCatalogId", "geography", "notifySchemaChanges", "nonBreakingChangesPreference", "breakingChange", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespaceDefinition"]) -> typing.Union['NamespaceDefinitionType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespaceFormat"]) -> typing.Union[MetaOapg.properties.namespaceFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operationIds"]) -> typing.Union[MetaOapg.properties.operationIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncCatalog"]) -> typing.Union['AirbyteCatalog', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> typing.Union['ConnectionSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduleType"]) -> typing.Union['ConnectionScheduleType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduleData"]) -> typing.Union['ConnectionScheduleData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['ConnectionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceRequirements"]) -> typing.Union['ResourceRequirements', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceCatalogId"]) -> typing.Union[MetaOapg.properties.sourceCatalogId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geography"]) -> typing.Union['Geography', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifySchemaChanges"]) -> typing.Union[MetaOapg.properties.notifySchemaChanges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonBreakingChangesPreference"]) -> typing.Union['NonBreakingChangesPreference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakingChange"]) -> typing.Union[MetaOapg.properties.breakingChange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connectionId", "namespaceDefinition", "namespaceFormat", "name", "prefix", "operationIds", "syncCatalog", "schedule", "scheduleType", "scheduleData", "status", "resourceRequirements", "sourceCatalogId", "geography", "notifySchemaChanges", "nonBreakingChangesPreference", "breakingChange", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        connectionId: typing.Union[MetaOapg.properties.connectionId, str, uuid.UUID, ],
        namespaceDefinition: typing.Union['NamespaceDefinitionType', schemas.Unset] = schemas.unset,
        namespaceFormat: typing.Union[MetaOapg.properties.namespaceFormat, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        operationIds: typing.Union[MetaOapg.properties.operationIds, list, tuple, schemas.Unset] = schemas.unset,
        syncCatalog: typing.Union['AirbyteCatalog', schemas.Unset] = schemas.unset,
        schedule: typing.Union['ConnectionSchedule', schemas.Unset] = schemas.unset,
        scheduleType: typing.Union['ConnectionScheduleType', schemas.Unset] = schemas.unset,
        scheduleData: typing.Union['ConnectionScheduleData', schemas.Unset] = schemas.unset,
        status: typing.Union['ConnectionStatus', schemas.Unset] = schemas.unset,
        resourceRequirements: typing.Union['ResourceRequirements', schemas.Unset] = schemas.unset,
        sourceCatalogId: typing.Union[MetaOapg.properties.sourceCatalogId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        geography: typing.Union['Geography', schemas.Unset] = schemas.unset,
        notifySchemaChanges: typing.Union[MetaOapg.properties.notifySchemaChanges, bool, schemas.Unset] = schemas.unset,
        nonBreakingChangesPreference: typing.Union['NonBreakingChangesPreference', schemas.Unset] = schemas.unset,
        breakingChange: typing.Union[MetaOapg.properties.breakingChange, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectionUpdate':
        return super().__new__(
            cls,
            *_args,
            connectionId=connectionId,
            namespaceDefinition=namespaceDefinition,
            namespaceFormat=namespaceFormat,
            name=name,
            prefix=prefix,
            operationIds=operationIds,
            syncCatalog=syncCatalog,
            schedule=schedule,
            scheduleType=scheduleType,
            scheduleData=scheduleData,
            status=status,
            resourceRequirements=resourceRequirements,
            sourceCatalogId=sourceCatalogId,
            geography=geography,
            notifySchemaChanges=notifySchemaChanges,
            nonBreakingChangesPreference=nonBreakingChangesPreference,
            breakingChange=breakingChange,
            _configuration=_configuration,
            **kwargs,
        )

from airbyte_config_api_client.model.airbyte_catalog import AirbyteCatalog
from airbyte_config_api_client.model.connection_schedule import ConnectionSchedule
from airbyte_config_api_client.model.connection_schedule_data import ConnectionScheduleData
from airbyte_config_api_client.model.connection_schedule_type import ConnectionScheduleType
from airbyte_config_api_client.model.connection_status import ConnectionStatus
from airbyte_config_api_client.model.geography import Geography
from airbyte_config_api_client.model.namespace_definition_type import NamespaceDefinitionType
from airbyte_config_api_client.model.non_breaking_changes_preference import NonBreakingChangesPreference
from airbyte_config_api_client.model.resource_requirements import ResourceRequirements
