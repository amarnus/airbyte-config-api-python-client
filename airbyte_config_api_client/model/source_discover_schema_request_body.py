# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class SourceDiscoverSchemaRequestBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "sourceId",
        }
        
        class properties:
            sourceId = schemas.UUIDSchema
            connectionId = schemas.UUIDSchema
            disable_cache = schemas.BoolSchema
            notifySchemaChange = schemas.BoolSchema
            __annotations__ = {
                "sourceId": sourceId,
                "connectionId": connectionId,
                "disable_cache": disable_cache,
                "notifySchemaChange": notifySchemaChange,
            }
    
    sourceId: MetaOapg.properties.sourceId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disable_cache"]) -> MetaOapg.properties.disable_cache: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifySchemaChange"]) -> MetaOapg.properties.notifySchemaChange: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceId", "connectionId", "disable_cache", "notifySchemaChange", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> MetaOapg.properties.sourceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionId"]) -> typing.Union[MetaOapg.properties.connectionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disable_cache"]) -> typing.Union[MetaOapg.properties.disable_cache, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifySchemaChange"]) -> typing.Union[MetaOapg.properties.notifySchemaChange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceId", "connectionId", "disable_cache", "notifySchemaChange", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sourceId: typing.Union[MetaOapg.properties.sourceId, str, uuid.UUID, ],
        connectionId: typing.Union[MetaOapg.properties.connectionId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        disable_cache: typing.Union[MetaOapg.properties.disable_cache, bool, schemas.Unset] = schemas.unset,
        notifySchemaChange: typing.Union[MetaOapg.properties.notifySchemaChange, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceDiscoverSchemaRequestBody':
        return super().__new__(
            cls,
            *_args,
            sourceId=sourceId,
            connectionId=connectionId,
            disable_cache=disable_cache,
            notifySchemaChange=notifySchemaChange,
            _configuration=_configuration,
            **kwargs,
        )
