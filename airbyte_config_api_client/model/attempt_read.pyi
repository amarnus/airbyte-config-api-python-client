# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class AttemptRead(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "id",
            "status",
            "updatedAt",
        }
        
        class properties:
            id = schemas.Int64Schema
        
            @staticmethod
            def status() -> typing.Type['AttemptStatus']:
                return AttemptStatus
            createdAt = schemas.Int64Schema
            updatedAt = schemas.Int64Schema
            endedAt = schemas.Int64Schema
            bytesSynced = schemas.Int64Schema
            recordsSynced = schemas.Int64Schema
        
            @staticmethod
            def totalStats() -> typing.Type['AttemptStats']:
                return AttemptStats
            
            
            class streamStats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttemptStreamStats']:
                        return AttemptStreamStats
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AttemptStreamStats'], typing.List['AttemptStreamStats']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streamStats':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttemptStreamStats':
                    return super().__getitem__(i)
        
            @staticmethod
            def failureSummary() -> typing.Type['AttemptFailureSummary']:
                return AttemptFailureSummary
            __annotations__ = {
                "id": id,
                "status": status,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "endedAt": endedAt,
                "bytesSynced": bytesSynced,
                "recordsSynced": recordsSynced,
                "totalStats": totalStats,
                "streamStats": streamStats,
                "failureSummary": failureSummary,
            }
    
    createdAt: MetaOapg.properties.createdAt
    id: MetaOapg.properties.id
    status: 'AttemptStatus'
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'AttemptStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endedAt"]) -> MetaOapg.properties.endedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bytesSynced"]) -> MetaOapg.properties.bytesSynced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordsSynced"]) -> MetaOapg.properties.recordsSynced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalStats"]) -> 'AttemptStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamStats"]) -> MetaOapg.properties.streamStats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failureSummary"]) -> 'AttemptFailureSummary': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "createdAt", "updatedAt", "endedAt", "bytesSynced", "recordsSynced", "totalStats", "streamStats", "failureSummary", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'AttemptStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endedAt"]) -> typing.Union[MetaOapg.properties.endedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bytesSynced"]) -> typing.Union[MetaOapg.properties.bytesSynced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordsSynced"]) -> typing.Union[MetaOapg.properties.recordsSynced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalStats"]) -> typing.Union['AttemptStats', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamStats"]) -> typing.Union[MetaOapg.properties.streamStats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failureSummary"]) -> typing.Union['AttemptFailureSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "createdAt", "updatedAt", "endedAt", "bytesSynced", "recordsSynced", "totalStats", "streamStats", "failureSummary", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        status: 'AttemptStatus',
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, decimal.Decimal, int, ],
        endedAt: typing.Union[MetaOapg.properties.endedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bytesSynced: typing.Union[MetaOapg.properties.bytesSynced, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recordsSynced: typing.Union[MetaOapg.properties.recordsSynced, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalStats: typing.Union['AttemptStats', schemas.Unset] = schemas.unset,
        streamStats: typing.Union[MetaOapg.properties.streamStats, list, tuple, schemas.Unset] = schemas.unset,
        failureSummary: typing.Union['AttemptFailureSummary', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttemptRead':
        return super().__new__(
            cls,
            *_args,
            createdAt=createdAt,
            id=id,
            status=status,
            updatedAt=updatedAt,
            endedAt=endedAt,
            bytesSynced=bytesSynced,
            recordsSynced=recordsSynced,
            totalStats=totalStats,
            streamStats=streamStats,
            failureSummary=failureSummary,
            _configuration=_configuration,
            **kwargs,
        )

from airbyte_config_api_client.model.attempt_failure_summary import AttemptFailureSummary
from airbyte_config_api_client.model.attempt_stats import AttemptStats
from airbyte_config_api_client.model.attempt_status import AttemptStatus
from airbyte_config_api_client.model.attempt_stream_stats import AttemptStreamStats
