# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class DestinationDefinitionRead(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "documentationUrl",
            "dockerImageTag",
            "dockerRepository",
            "supportsDbt",
            "name",
            "normalizationConfig",
            "destinationDefinitionId",
        }
        
        class properties:
            destinationDefinitionId = schemas.UUIDSchema
            name = schemas.StrSchema
            dockerRepository = schemas.StrSchema
            dockerImageTag = schemas.StrSchema
            documentationUrl = schemas.StrSchema
            supportsDbt = schemas.BoolSchema
        
            @staticmethod
            def normalizationConfig() -> typing.Type['NormalizationDestinationDefinitionConfig']:
                return NormalizationDestinationDefinitionConfig
            icon = schemas.StrSchema
            protocolVersion = schemas.StrSchema
        
            @staticmethod
            def releaseStage() -> typing.Type['ReleaseStage']:
                return ReleaseStage
            releaseDate = schemas.DateSchema
        
            @staticmethod
            def resourceRequirements() -> typing.Type['ActorDefinitionResourceRequirements']:
                return ActorDefinitionResourceRequirements
            __annotations__ = {
                "destinationDefinitionId": destinationDefinitionId,
                "name": name,
                "dockerRepository": dockerRepository,
                "dockerImageTag": dockerImageTag,
                "documentationUrl": documentationUrl,
                "supportsDbt": supportsDbt,
                "normalizationConfig": normalizationConfig,
                "icon": icon,
                "protocolVersion": protocolVersion,
                "releaseStage": releaseStage,
                "releaseDate": releaseDate,
                "resourceRequirements": resourceRequirements,
            }
    
    documentationUrl: MetaOapg.properties.documentationUrl
    dockerImageTag: MetaOapg.properties.dockerImageTag
    dockerRepository: MetaOapg.properties.dockerRepository
    supportsDbt: MetaOapg.properties.supportsDbt
    name: MetaOapg.properties.name
    normalizationConfig: 'NormalizationDestinationDefinitionConfig'
    destinationDefinitionId: MetaOapg.properties.destinationDefinitionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationDefinitionId"]) -> MetaOapg.properties.destinationDefinitionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dockerRepository"]) -> MetaOapg.properties.dockerRepository: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dockerImageTag"]) -> MetaOapg.properties.dockerImageTag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentationUrl"]) -> MetaOapg.properties.documentationUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportsDbt"]) -> MetaOapg.properties.supportsDbt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normalizationConfig"]) -> 'NormalizationDestinationDefinitionConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocolVersion"]) -> MetaOapg.properties.protocolVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseStage"]) -> 'ReleaseStage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseDate"]) -> MetaOapg.properties.releaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceRequirements"]) -> 'ActorDefinitionResourceRequirements': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["destinationDefinitionId", "name", "dockerRepository", "dockerImageTag", "documentationUrl", "supportsDbt", "normalizationConfig", "icon", "protocolVersion", "releaseStage", "releaseDate", "resourceRequirements", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationDefinitionId"]) -> MetaOapg.properties.destinationDefinitionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dockerRepository"]) -> MetaOapg.properties.dockerRepository: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dockerImageTag"]) -> MetaOapg.properties.dockerImageTag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentationUrl"]) -> MetaOapg.properties.documentationUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportsDbt"]) -> MetaOapg.properties.supportsDbt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normalizationConfig"]) -> 'NormalizationDestinationDefinitionConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocolVersion"]) -> typing.Union[MetaOapg.properties.protocolVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseStage"]) -> typing.Union['ReleaseStage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseDate"]) -> typing.Union[MetaOapg.properties.releaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceRequirements"]) -> typing.Union['ActorDefinitionResourceRequirements', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["destinationDefinitionId", "name", "dockerRepository", "dockerImageTag", "documentationUrl", "supportsDbt", "normalizationConfig", "icon", "protocolVersion", "releaseStage", "releaseDate", "resourceRequirements", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        documentationUrl: typing.Union[MetaOapg.properties.documentationUrl, str, ],
        dockerImageTag: typing.Union[MetaOapg.properties.dockerImageTag, str, ],
        dockerRepository: typing.Union[MetaOapg.properties.dockerRepository, str, ],
        supportsDbt: typing.Union[MetaOapg.properties.supportsDbt, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        normalizationConfig: 'NormalizationDestinationDefinitionConfig',
        destinationDefinitionId: typing.Union[MetaOapg.properties.destinationDefinitionId, str, uuid.UUID, ],
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        protocolVersion: typing.Union[MetaOapg.properties.protocolVersion, str, schemas.Unset] = schemas.unset,
        releaseStage: typing.Union['ReleaseStage', schemas.Unset] = schemas.unset,
        releaseDate: typing.Union[MetaOapg.properties.releaseDate, str, date, schemas.Unset] = schemas.unset,
        resourceRequirements: typing.Union['ActorDefinitionResourceRequirements', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DestinationDefinitionRead':
        return super().__new__(
            cls,
            *_args,
            documentationUrl=documentationUrl,
            dockerImageTag=dockerImageTag,
            dockerRepository=dockerRepository,
            supportsDbt=supportsDbt,
            name=name,
            normalizationConfig=normalizationConfig,
            destinationDefinitionId=destinationDefinitionId,
            icon=icon,
            protocolVersion=protocolVersion,
            releaseStage=releaseStage,
            releaseDate=releaseDate,
            resourceRequirements=resourceRequirements,
            _configuration=_configuration,
            **kwargs,
        )

from airbyte_config_api_client.model.actor_definition_resource_requirements import ActorDefinitionResourceRequirements
from airbyte_config_api_client.model.normalization_destination_definition_config import NormalizationDestinationDefinitionConfig
from airbyte_config_api_client.model.release_stage import ReleaseStage
