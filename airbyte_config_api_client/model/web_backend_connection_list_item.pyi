# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from airbyte_config_api_client import schemas  # noqa: F401


class WebBackendConnectionListItem(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about a connection that shows up in the connection list view.
    """


    class MetaOapg:
        required = {
            "destination",
            "name",
            "connectionId",
            "isSyncing",
            "source",
            "schemaChange",
            "status",
        }
        
        class properties:
            connectionId = schemas.UUIDSchema
            name = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['ConnectionStatus']:
                return ConnectionStatus
        
            @staticmethod
            def source() -> typing.Type['SourceSnippetRead']:
                return SourceSnippetRead
        
            @staticmethod
            def destination() -> typing.Type['DestinationSnippetRead']:
                return DestinationSnippetRead
            isSyncing = schemas.BoolSchema
        
            @staticmethod
            def schemaChange() -> typing.Type['SchemaChange']:
                return SchemaChange
        
            @staticmethod
            def scheduleType() -> typing.Type['ConnectionScheduleType']:
                return ConnectionScheduleType
        
            @staticmethod
            def scheduleData() -> typing.Type['ConnectionScheduleData']:
                return ConnectionScheduleData
            latestSyncJobCreatedAt = schemas.Int64Schema
        
            @staticmethod
            def latestSyncJobStatus() -> typing.Type['JobStatus']:
                return JobStatus
            __annotations__ = {
                "connectionId": connectionId,
                "name": name,
                "status": status,
                "source": source,
                "destination": destination,
                "isSyncing": isSyncing,
                "schemaChange": schemaChange,
                "scheduleType": scheduleType,
                "scheduleData": scheduleData,
                "latestSyncJobCreatedAt": latestSyncJobCreatedAt,
                "latestSyncJobStatus": latestSyncJobStatus,
            }
    
    destination: 'DestinationSnippetRead'
    name: MetaOapg.properties.name
    connectionId: MetaOapg.properties.connectionId
    isSyncing: MetaOapg.properties.isSyncing
    source: 'SourceSnippetRead'
    schemaChange: 'SchemaChange'
    status: 'ConnectionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ConnectionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'SourceSnippetRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'DestinationSnippetRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSyncing"]) -> MetaOapg.properties.isSyncing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemaChange"]) -> 'SchemaChange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduleType"]) -> 'ConnectionScheduleType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduleData"]) -> 'ConnectionScheduleData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latestSyncJobCreatedAt"]) -> MetaOapg.properties.latestSyncJobCreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latestSyncJobStatus"]) -> 'JobStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connectionId", "name", "status", "source", "destination", "isSyncing", "schemaChange", "scheduleType", "scheduleData", "latestSyncJobCreatedAt", "latestSyncJobStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionId"]) -> MetaOapg.properties.connectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ConnectionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> 'SourceSnippetRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> 'DestinationSnippetRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSyncing"]) -> MetaOapg.properties.isSyncing: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemaChange"]) -> 'SchemaChange': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduleType"]) -> typing.Union['ConnectionScheduleType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduleData"]) -> typing.Union['ConnectionScheduleData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latestSyncJobCreatedAt"]) -> typing.Union[MetaOapg.properties.latestSyncJobCreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latestSyncJobStatus"]) -> typing.Union['JobStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connectionId", "name", "status", "source", "destination", "isSyncing", "schemaChange", "scheduleType", "scheduleData", "latestSyncJobCreatedAt", "latestSyncJobStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        destination: 'DestinationSnippetRead',
        name: typing.Union[MetaOapg.properties.name, str, ],
        connectionId: typing.Union[MetaOapg.properties.connectionId, str, uuid.UUID, ],
        isSyncing: typing.Union[MetaOapg.properties.isSyncing, bool, ],
        source: 'SourceSnippetRead',
        schemaChange: 'SchemaChange',
        status: 'ConnectionStatus',
        scheduleType: typing.Union['ConnectionScheduleType', schemas.Unset] = schemas.unset,
        scheduleData: typing.Union['ConnectionScheduleData', schemas.Unset] = schemas.unset,
        latestSyncJobCreatedAt: typing.Union[MetaOapg.properties.latestSyncJobCreatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        latestSyncJobStatus: typing.Union['JobStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebBackendConnectionListItem':
        return super().__new__(
            cls,
            *_args,
            destination=destination,
            name=name,
            connectionId=connectionId,
            isSyncing=isSyncing,
            source=source,
            schemaChange=schemaChange,
            status=status,
            scheduleType=scheduleType,
            scheduleData=scheduleData,
            latestSyncJobCreatedAt=latestSyncJobCreatedAt,
            latestSyncJobStatus=latestSyncJobStatus,
            _configuration=_configuration,
            **kwargs,
        )

from airbyte_config_api_client.model.connection_schedule_data import ConnectionScheduleData
from airbyte_config_api_client.model.connection_schedule_type import ConnectionScheduleType
from airbyte_config_api_client.model.connection_status import ConnectionStatus
from airbyte_config_api_client.model.destination_snippet_read import DestinationSnippetRead
from airbyte_config_api_client.model.job_status import JobStatus
from airbyte_config_api_client.model.schema_change import SchemaChange
from airbyte_config_api_client.model.source_snippet_read import SourceSnippetRead
